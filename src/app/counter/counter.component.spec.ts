import { ComponentFixture, TestBed } from '@angular/core/testing';
import { CounterComponent } from './counter.component';

describe('CounterComponent', () => {
  let component: CounterComponent;
  let fixture: ComponentFixture<CounterComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [CounterComponent]   // 1Ô∏è‚É£ declare the component under test
    });

    fixture = TestBed.createComponent(CounterComponent); // 2Ô∏è‚É£ build a test host for the component
    component = fixture.componentInstance;               // 3Ô∏è‚É£ get the class instance
    fixture.detectChanges();                             // 4Ô∏è‚É£ run first change detection (bind template)
  });

  it('should create', () => {
    expect(component).toBeTruthy();                      // 5Ô∏è‚É£ sanity check
  });

  it('should start with count 0', () => {
    expect(component.count).toBe(0);                     // 6Ô∏è‚É£ initial state
  });

  it('should increment count when increment() is called', () => {
    component.increment();                               // 7Ô∏è‚É£ call the method
    expect(component.count).toBe(1);                     // 8Ô∏è‚É£ verify state changed
  });

  it('should update the template when button is clicked', () => {
    const button: HTMLButtonElement =
      fixture.nativeElement.querySelector('button');     // 9Ô∏è‚É£ find the button in DOM

    button.click();                                      // üîü simulate user click
    fixture.detectChanges();                             // 1Ô∏è‚É£1Ô∏è‚É£ update bindings after click

    const h2: HTMLHeadingElement =
      fixture.nativeElement.querySelector('h2');         // 1Ô∏è‚É£2Ô∏è‚É£ read DOM again
    expect(h2.textContent).toContain('1');               // 1Ô∏è‚É£3Ô∏è‚É£ UI reflects new state
  });
});
